@startuml

skinparam classAttributeIconSize 0
ログイン.ログインフォーム --> ログイン.ログインロジック
ログイン.ログインフォーム - メニュー.メニューフォーム
ログイン.ログインロジック --> ログイン.ログインDBアクセス
ログイン.ログインロジック --> 共通.共通ロジック
ログイン.ログインロジック --> データ.ユーザー情報
ログイン.ログインロジック --> 共通.ユーザー状態
ログイン.ログインDBアクセス --> データ.ユーザー情報
メニュー.メニューフォーム --> 共通.ユーザー状態
メニュー.メニューフォーム --> 共通.共通ロジック
メニュー.メニューフォーム --> データ.ユーザー情報
共通.共通ロジック --> 共通.共通DBアクセス
共通.共通ロジック --> 共通.ユーザー状態
勤怠.勤怠フォーム --> データ.ユーザー情報
勤怠.勤怠フォーム --> 勤怠.勤怠ロジック
勤怠.勤怠フォーム --> データ.勤怠情報
勤怠.勤怠フォーム --> 勤怠.月
勤怠.勤怠ロジック --> データ.勤怠情報
勤怠.勤怠ロジック --> 勤怠.月
勤怠.勤怠ロジック --> 勤怠.勤怠DBアクセス
勤怠.勤怠DBアクセス --> データ.勤務時間情報
データ.勤怠情報 --> データ.勤務時間情報

namespace ログイン #FFFFFF {
  class ログインフォーム {
    + コンストラクタ()
    - ボタンクリックイベント() : void
    - 未入力チェック() : bool
  }
  
  class ログインロジック {
     + ユーザー情報 : ユーザー情報
     + コンストラクタ()
     + ユーザーチェック(ユーザーID : string, パスワード : string) : bool
     - パスワードチェック(パスワード : string, ハッシュ値 : string)
  }
  
  class ログインDBアクセス {
     + ユーザー情報取得(ユーザーID : string) : ユーザー情報
  }
}

namespace メール #FFFFFF {
  class メールフォーム {
    + ユーザー情報 : ユーザー情報
    - メール情報リスト : List<メール情報>
    + コンストラクタ(ユーザー情報 : ユーザー情報)
    - 受信ボックスボタンクリックイベント() : void
    - 送信ボックスボタンクリックイベント() : void
    - 新規作成ボタンクリックイベント() : void
    - 返信ボタンクリックイベント() : void
    - 終了ボックスボタンクリックイベント() : void
    - メール表示(ユーザーID : string, 送受信 : 送受信) : void
    - メール一覧表示() : void
  }

  class 新規作成フォーム {
    + ユーザー情報 : ユーザー情報
    + コンストラクタ(ユーザー情報 : ユーザー情報)
    - 宛先ボタンクリックイベント() : void
    - 送信ボタンクリックイベント() : void
  }
  
  class メールロジック {
    + メール取得(ユーザーID : string, 送受信 : 送受信) : List<メール情報>
  }
  
  class メールDBアクセス {
    + メール受信取得(ユーザーID : string) : List<メール情報>
    + メール送信取得(ユーザーID : string) : List<メール情報>
  }

  enum 送受信 {
    送信者 = 0
    受信者 = 1
  }
}

namespace 勤怠 #FFFFFF {

  enum 月 {
    1月 = 1
    2月 = 2
    3月 = 3
    4月 = 4
    5月 = 5
    6月 = 6
    7月 = 7
    8月 = 8
    9月 = 9
    10月 = 10
    11月 = 11
    12月 = 12
  }

  class 勤怠フォーム {
    + ユーザー情報 : ユーザー情報
    - 勤怠情報リスト : List<勤怠情報>
    + コンストラクタ(ユーザー情報 : ユーザー情報)
    - 先月ボタンクリックイベント() : void
    - 来月ボタンクリックイベント() : void
    - 保存ボタンクリックイベント() : void
    - 終了ボタンクリックイベント() : void
    - 勤怠情報設定(ユーザーID : string, 月 : 月) : void
    - 画面に勤怠情報表示() : void
  }
  
  class 勤怠ロジック {
     + 勤怠情報取得(ユーザーID : string, 月 : 月) : List<勤怠情報>
     + 勤怠情報更新(ユーザーID : string, 勤怠情報リスト : List<勤怠情報>) : void
  }
  
  class 勤怠DBアクセス {
     + 勤務時間情報取得(ユーザーID : string, 月 : int) : List<勤務時間情報>
     + 勤務時間情報更新(ユーザーID : string, 月 : int) : void
  }
}

namespace 共通 #FFFFFF {
  enum ユーザー状態 {
    ログイン = 0
    ログアウト = 1
  }

  class 共通ロジック {
    + ユーザー状態設定(ユーザーID : string, ユーザー状態 : ユーザー状態) : void
  }
  
  class 共通DBアクセス {
    + ログインフラグ更新(ユーザーID : string, ユーザー状態 : int) : void
  }
}

namespace メニュー #FFFFFF {
  class メニューフォーム {
    + ユーザー情報 : ユーザー情報
    + コンストラクタ(ユーザー情報 : ユーザー情報)
    - 画面モード切り替え() : void
    - 勤怠起動ボタンクリックイベント() : void
    - タスク起動ボタンクリックイベント() : void
    - メール起動ボタンクリックイベント() : void
    - 会議使用状況起動ボタンクリックイベント() : void
    - ユーザー管理起動ボタンクリックイベント() : void
    - 勤怠の一括エクセル出力起動ボタンクリックイベント() : void
    - ログアウトボタンクリックイベント() : void
  }
}

namespace データ #FFFFFF {
  class ユーザー情報 {
     + ユーザーID : String
     + ユーザー名 : String
     + パスワード : String
     + 権限名 : String
  }

  class 勤怠情報 {
     + 日付 : int
     + 曜日 : String
     + 勤務時間情報 : 勤務時間情報
     + 残業時間 : int
  }

  class 勤務時間情報 {
     + 勤務開始時間 : DateTime
     + 勤務終了時間 : DateTime 
     + 休憩時間 : int
  }

  class メール情報 {
     + 送信者ユーザーID : String
     + 受信者ユーザーID : String
     + 件名 : String
     + メッセージ : String
     + 追加日時 : DateTime
  }
}

@enduml