@startuml
skinparam sequenceArrowThickness 2
skinparam roundcorner 20
skinparam maxmessagesize 60
skinparam sequenceParticipant underline

actor "ユーザー" as user
participant "ログインフォーム" as login_form
participant "ログインロジック" as login_logic
participant "データベースアクセス" as data_acces
participant "ユーザー情報" as user_info
database "データベース" as db

user -> login_form: 起動＆インスタンス生成
login_form -> login_form: コンストラクタ
activate login_form
login_form -> login_form:ユーザーIDの最大文字数を二十文字に設定
login_form -> login_form:パスワードの最大文字数を二十文字に設定

login_form --> user:
deactivate login_form
user -> login_form: ログイン情報の入力
user -> login_form: ログインボタン押下
login_form -> login_form: ボタンクリックイベント
activate login_form

login_form -> login_form: 未入力チェック
activate login_form
opt 未入力の項目があるとき
    login_form -> login_form: エラーメッセージ出力
    login_form -> login_form: 未入力項目を赤色に設定
    login_form --> login_form:falseを返す
end
login_form --> login_form:trueを返す
deactivate login_form
opt 未入力チェックの結果がfalse
    login_form --> user:戻り値無し
end
login_form -> login_logic: インスタンス生成
login_logic --> login_form:
login_form -> login_logic: ユーザーチェック
activate login_logic
login_logic -> data_acces: インスタンス生成
data_acces --> login_logic:
login_logic -> data_acces: ユーザー情報取得
activate data_acces

data_acces -> user_info: インスタンス生成
user_info --> data_acces:
data_acces -> db: ログインSQL
db --> data_acces: ユーザー情報データ
data_acces -> user_info: ユーザー情報に取得したデータを設定
user_info --> data_acces:
data_acces --> login_logic: ユーザー情報を返す
deactivate data_acces
opt ユーザー情報がNULLの時
    login_logic --> login_form: falseを返す
end
login_logic -> login_logic: パスワードチェック
activate login_logic
alt パスワードが一致
    login_logic --> login_logic: trueを返す
else パスワードが不一致
    login_logic --> login_logic: falseを返す
end
deactivate login_logic
login_logic --> login_form: パスワードチェックの結果を返す
deactivate login_logic
alt ユーザーチェックの結果がtrueの時
    login_form --> user: メニュー画面を起動
else ユーザーチェックの結果がfalseの時
    login_form -> login_form: ユーザーIDとパスワードををクリア
    login_form --> user: ログイン画面
end
deactivate login_form

@enduml